{"version":3,"sources":["App.js","index.js"],"names":["goodsFromServer","App","state","goods","Jam","select","good","copy","setState","prev","remove","reset","parseString","index","arr","Fragment","key","length","prepareString","goodsArr","Object","keys","map","className","includes","type","onClick","this","React","Component","ReactDOM","render","document","getElementById"],"mappings":"sOAGMA,G,MAAkB,CACtB,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,WAgHaC,E,4MA5GbC,MAAQ,CACNC,MAAO,CACLC,IAAK,Q,EAITC,OAAS,SAACC,GACR,IAAMC,EAAI,eAAQ,EAAKL,MAAMC,OAE7BI,EAAKD,GAAQA,EAEb,EAAKE,UAAS,SAAAC,GAAI,kCACbA,GADa,IAEhBN,MAAOI,Q,EAIXG,OAAS,SAACJ,GACR,IAAMC,EAAI,eAAQ,EAAKL,MAAMC,cAEtBI,EAAKD,GACZ,EAAKE,UAAS,SAAAC,GAAI,kCACbA,GADa,IAEhBN,MAAOI,Q,EAIXI,MAAQ,WACN,EAAKH,UAAS,SAAAC,GAAI,kCACbA,GADa,IAEhBN,MAAO,S,EAIXS,YAAc,SAACN,EAAMO,EAAOC,GAAd,OACZ,kBAAC,IAAMC,SAAP,CAAgBC,IAAKV,GAClBO,EAAQ,GAAKA,IAAUC,EAAIG,OAAS,EAAI,KAAO,GAC/CX,EACgB,IAAfQ,EAAIG,OAAe,eAAiB,GACrCJ,IAAUC,EAAIG,OAAS,EAAI,QAAU,GACrCJ,IAAUC,EAAIG,OAAS,GAAKH,EAAIG,OAAS,EAAI,gBAAkB,K,EAIpEC,cAAgB,WACd,IAAMC,EAAWC,OAAOC,KAAK,EAAKnB,MAAMC,OAExC,OAA4B,IAApBgB,EAASF,OAEb,yDAIAE,EAASG,IAAI,EAAKV,c,4CAGxB,WAAU,IAAD,OACP,OACE,yBAAKW,UAAU,OACb,4BACGvB,EAAgBsB,KAAI,SAAAhB,GAAI,OACvB,wBACEU,IAAKV,EACLiB,UAAWH,OAAOC,KAAK,EAAKnB,MAAMC,OAAOqB,SAASlB,GAC9C,WACA,IAEHA,EACCc,OAAOC,KAAK,EAAKnB,MAAMC,OAAOqB,SAASlB,GAYrC,4BACEmB,KAAK,SACLC,QAAS,WACP,EAAKhB,OAAOJ,KAHhB,UAVA,4BACEmB,KAAK,SACLC,QAAS,WACP,EAAKrB,OAAOC,KAHhB,eAsBV,4BACEmB,KAAK,SACLC,QAAS,WACP,EAAKf,UAHT,SAQA,4BACGgB,KAAKT,sB,GAtGEU,IAAMC,WCZxBC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.d65be2bd.chunk.js","sourcesContent":["import React from 'react';\nimport './App.scss';\n\nconst goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nclass App extends React.Component {\n  state = {\n    goods: {\n      Jam: 'Jam',\n    },\n  }\n\n  select = (good) => {\n    const copy = { ...this.state.goods };\n\n    copy[good] = good;\n\n    this.setState(prev => ({\n      ...prev,\n      goods: copy,\n    }));\n  }\n\n  remove = (good) => {\n    const copy = { ...this.state.goods };\n\n    delete copy[good];\n    this.setState(prev => ({\n      ...prev,\n      goods: copy,\n    }));\n  }\n\n  reset = () => {\n    this.setState(prev => ({\n      ...prev,\n      goods: {},\n    }));\n  }\n\n  parseString = (good, index, arr) => (\n    <React.Fragment key={good}>\n      {index > 0 && index !== arr.length - 1 ? ', ' : ''}\n      {good}\n      { arr.length === 1 ? ' is selected' : ''}\n      {index === arr.length - 2 ? ' and ' : ''}\n      {index === arr.length - 1 && arr.length > 1 ? ' are selected' : ''}\n    </React.Fragment>\n  )\n\n  prepareString = () => {\n    const goodsArr = Object.keys(this.state.goods);\n\n    return (goodsArr.length === 0)\n      ? (\n        <>\n          No goods selected\n        </>\n      )\n      : goodsArr.map(this.parseString);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <ul>\n          {goodsFromServer.map(good => (\n            <li\n              key={good}\n              className={Object.keys(this.state.goods).includes(good)\n                ? 'selected'\n                : ''}\n            >\n              {good}\n              {!Object.keys(this.state.goods).includes(good)\n                ? (\n                  <button\n                    type=\"button\"\n                    onClick={() => {\n                      this.select(good);\n                    }}\n                  >\n                    Select\n                  </button>\n                )\n                : (\n                  <button\n                    type=\"button\"\n                    onClick={() => {\n                      this.remove(good);\n                    }}\n                  >\n                    Remove\n                  </button>\n                )}\n            </li>\n          ))}\n        </ul>\n        <button\n          type=\"button\"\n          onClick={() => {\n            this.reset();\n          }}\n        >\n          Reset\n        </button>\n        <h1>\n          {this.prepareString()}\n        </h1>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}